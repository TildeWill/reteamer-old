<div class="row org-chart">
  <div class="col-sm-6">
    <h1>Org Chart</h1>
  </div>
  <div>
    <form method="get" id="date-form"><input type="date" id="effective_date" name="effective_date" value="<%= @current_date %>"/></form>
  </div>

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-org-chart@2"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-flextree@2.0.0/build/d3-flextree.js"></script>
  <svg class="date-slider-container"></svg>
  <div class="chart-container" style="padding-left:0; padding-right:0"></div>
  <script>
    var dateField = document.querySelector('#effective_date');

    dateField.addEventListener('change', (event) => {
      document.querySelector('#date-form').submit();
    });
  </script>
  <script>
    var org_data = <%= raw(@flat_org_chart.to_json) %>;
    var chart = new d3.OrgChart()
        .container('.chart-container')
        .data(org_data)
        // .connections(
        //   [
        //     { id: 1, from: "008680b1-2c41-429e-a37c-fd4c1263ab11", to: "d07b0568-989a-4453-b8df-45476b7055c4", label: "Mushroom Hunting Team" },
        //   ],
        // )
      .nodeWidth(d => 250)
      .initialZoom(0.7)
      .nodeHeight(d => 200)
      .childrenMargin(d => 40)
      .compactMarginBetween(d => 15)
      .compactMarginPair(d => 80)
      .nodeContent(function(d, index, arr, state) {
        return `
            <div style="padding-top:30px;background-color:none;margin-left:1px;height:${
                d.height
              }px;border-radius:2px;overflow:visible">
              <div style="height:${d.height - 32}px;padding-top:0px;background-color:white;border:1px solid lightgray;">
                <img src="${d.data.image_url || ''}" style="margin-top:-30px;margin-left:${d.width / 2 - 30}px;border-radius:100px;height:60px;overflow:hidden" />

                <div style="margin-right:10px;margin-top:15px;float:right">${
                  d.data.employee_id || 'Contractor'
                }</div>

                <div style="margin-top:-30px;background-color:${d.data.isContractor ? '#FF9036' : '#3AB6E3'};height:10px;width:${d.width -
        2}px;border-radius:1px"></div>

                <div style="padding:20px; padding-top:35px;text-align:center">
                  <div style="color:#111672;font-size:16px;font-weight:bold"> ${
                    d.data.name
                  } </div>
                  <div style="color:#404040;font-size:16px;margin-top:4px"> ${
                    d.data.title
                  } </div>
                </div>
                ${d.data._directSubordinates > 0 ? `
                <div style="display:flex;justify-content:space-between;padding-left:15px;padding-right:15px;">
                  <div > Manages:  ${d.data._directSubordinates} ðŸ‘¤</div>
                  <div > Oversees: ${d.data._totalSubordinates} ðŸ‘¤</div>
                </div>` : ""}
              </div>
            </div>
  `;
      })
      .render();
    chart.expandAll();


  </script>
  <script>
    var histogram = <%= raw(@histogram.to_json) %>;
    var data = histogram;

    data.forEach(function(d) {
      d.date = Date.parse(d.date);
    });

    var margin = {
        top: 20,
        right: 80,
        bottom: 30,
        left: 50
      }
    var width = document.querySelector('.date-slider-container').clientWidth - margin.left - margin.right;
    var height = 80 - margin.top - margin.bottom;

    var x = d3.scaleUtc()
      .range([0, width]);

    var y = d3.scaleSqrt()
      .exponent(0.1)
      .range([height, 0]);

    var xAxis = d3.axisBottom(x)

    var svg = d3.select(".date-slider-container")
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var xExtent = d3.extent(data, function(d) {
      return d.date;
    });
    x.domain(
      [
        new Date(xExtent[0]).setDate(new Date(xExtent[0]).getDate()-5),
        new Date(xExtent[1]).setDate(new Date(xExtent[1]).getDate()+30)
      ]
    );

    y.domain([
      0,
      d3.max(data, function(d) {
        return d.value;
      })
    ]);

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg
      .selectAll("rect")
      .data(data)
      .enter()
      .append("rect")
      .attr("fill", "steelblue")
      .attr("height", d => height - y(d.value))
      .attr("width", 10)
      .attr("x", (d, i) => x(d.date))
      .attr("y", d => y(d.value))

    var chartCursor = svg.append("g")
      .attr("class", "mouse-over-effects");

    chartCursor.append("path") // this is the black vertical line to follow mouse
      .attr("class", "cursor-line")
      .style("stroke", "black")
      .style("stroke-width", "1px")
      .style("opacity", "0");

    var currentDateMarker = svg.append("path") // this is the black vertical line to follow mouse
      .attr("class", "date-marker")
      .style("stroke", "red")
      .style("stroke-width", "1px")
      .style("opacity", "1")
      .attr("d", function() {
        let currentDate = Date.parse(document.querySelector('#effective_date').value);
        var d = "M" + x(currentDate) + "," + height;
        d += " " + x(currentDate) + "," + 0;
        return d;
      });

    var lines = document.getElementsByClassName('line');

    var mousePerLine = chartCursor.selectAll('.mouse-per-line')
      .data(data)
      .enter()
      .append("g")
      .attr("class", "mouse-per-line");


    mousePerLine.append("text")
      .attr("transform", "translate(10,3)")
      .attr("class", "cursor-changes")
    mousePerLine.append("text")
      .attr("transform", "translate(10,13)")
      .attr("class", "cursor-date")

    chartCursor.append('svg:rect') // append a rect to catch mouse movements on canvas
      .attr('width', width) // can't catch mouse events on a g element
      .attr('height', height)
      .attr('fill', 'none')
      .attr('pointer-events', 'all')
      .on('mouseout', function() { // on mouse out hide line, circles and text
        d3.select(".cursor-line")
          .style("opacity", "0");
        d3.selectAll(".mouse-per-line text")
          .style("opacity", "0");
      })
      .on('mouseover', function() { // on mouse in show line, circles and text
        d3.select(".cursor-line")
          .style("opacity", "1");
        d3.selectAll(".mouse-per-line text")
          .style("opacity", "1");
      })
      .on('click', function(event) { // on mouse in show line, circles and text
        var mouse = d3.pointer(event);
        var xDate = x.invert(mouse[0])

        d3.select(".date-marker")
          .attr("d", function() {
            var d = "M" + mouse[0] + "," + height;
            d += " " + mouse[0] + "," + 0;
            return d;
          });
        d3.select("#effective_date").attr("value", xDate.toISOString().split('T')[0]).dispatch('change');
      })
      .on('mousemove', function(event) { // mouse moving over canvas
        var mouse = d3.pointer(event);
        d3.select(".cursor-line")
          .attr("d", function() {
            var d = "M" + mouse[0] + "," + height;
            d += " " + mouse[0] + "," + 0;
            return d;
          });

        d3.selectAll(".mouse-per-line")
          .attr("transform", function(d, i) {
            // d3.select(this).select('text.cursor-changes')
            //   .text(y.invert(11).toFixed(0) + " changes")
            d3.select(this).select('text.cursor-date')
              .text(x.invert(mouse[0]).toISOString().split('T')[0])

            return "translate(" + mouse[0] + ",0)";
          });
      });

  </script>
</div>

